#!/usr/bin/env node

try {
  require('worker_threads');
} catch (e) {
  // If we cannot find `worker_threads`, we must restart with the
  // --experimental-worker node option. Since node does not offer a process
  // replacing flavor of exec/spawn, we have to start a second subprocess,
  // inheriting STDIO, then forward the exit code, etc...
  const { argv, execArgv, execPath, exit, versions } = require('process');

  // But first, ensure we have a node version that is actually recent enough to
  // be supported. The `process.versions.node` value is "Major.Minor.Patch".
  const nodeMajor = parseInt(versions.node.split('.')[0], 10);
  if (nodeMajor < 10) {
    console.error(
      `Unsupported node version: ${versions.node}. Node >= 10.3.0 is required.`,
    );
    exit(-1);
  }

  const { spawnSync } = require('child_process');

  const result = spawnSync(
    execPath,
    ['--experimental-worker', ...execArgv, ...argv.slice(1)],
    { shell: false, stdio: 'inherit' },
  );

  if (result.signal != null) {
    // Convention is that a process killed by signal exits with 128+signal
    exit(require('os').constants.signals[result.signal] + 128);
  }
  exit(result.status);
}

require('../lib/program.js');
